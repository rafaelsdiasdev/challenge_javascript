{"version":3,"sources":["components/User.js","components/Installments.js","components/Home.js","components/Navbar.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["User","props","getUser","axios","get","then","responseFromDB","data","setState","ID","UserId","amountTaken","amountPayd","monthlyInterest","totalAmountInTaxes","installments","listOfData","state","name","email","photo","github","this","console","log","className","src","target","href","Component","Installments","filter","idx","value","payd","event","type","checked","id","onChange","e","handleChange","htmlFor","el","map","key","style","minWidth","dueDate","formatedValue","color","onClick","payment","disabled","Home","getAllData","responseFromApi","catch","err","Navbar","to","width","Footer","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a57e022e.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\n\nclass User extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            listOfData: [],\n            installments: [],\n            name: 'Rafael Dias',\n            email: 'rafaels.dias@me.com',\n            photo: 'https://res.cloudinary.com/dcbi1lakq/image/upload/v1581194942/photo/IMG-20191003-WA0012_mlqvpi.jpg',\n            github: 'github.com/rafaelsdiasdev'\n        }\n\n    }\n    getUser = () => {\n        axios.get('http://www.mocky.io/v2/5c923b0932000029056bce39')\n            .then(responseFromDB => {\n                const data = responseFromDB.data\n                this.setState({\n                    ID: data.UserId,\n                    amountTaken: data.amountTaken,\n                    amountPayd: data.amountPayd,\n                    monthlyInterest: data.monthlyInterest,\n                    totalAmountInTaxes: data.totalAmountInTaxes,\n                    installments: responseFromDB.data.installments,\n                    listOfData: responseFromDB.data\n                })\n            })\n    }\n\n    componentDidMount() {\n        this.getUser()\n    }\n\n    render() {\n        const { photo, name, email, github } = this.state\n        const data = this.props.data.data.listOfData\n        const installments = data.installments\n        console.log(installments)\n        return (\n            <div className=\"container mb-4\">\n                <div className=\"row\">\n                    <div className=\"col-3\">\n                        <img className=\"photo\" src={photo}></img>\n                    </div>\n                    <div className=\"col-5\">\n                        <p><strong>Nome: </strong>{name}</p>\n                        <p><strong>E-mail: </strong>{email}</p>\n                        <p><strong>Github: </strong><a target=\"_branck\" href=\"http://github.com/rafaelsdiasdev\">{github}</a></p>\n                    </div>\n                    <div className=\"col-4\">\n                        <p><strong>Juros Mensais: </strong>{data.monthlyInterest}%</p>\n                        <p><strong>Valor Pago: </strong>R$ {data.amountPayd},00</p>\n                        <p><strong>Total a pagar: </strong>R$ {data.amountTaken + data.totalAmountInTaxes},00</p>\n                        <p><strong>Total de juros: </strong>R$ {data.totalAmountInTaxes},00</p>                     {/* <p><strong>Parcelas pagas: </strong>{installments.filter(el => el.payd === true).length}</p> */}\n\n                    </div>\n                </div>\n                <hr />\n            </div>\n        )\n    }\n}\n\nexport default User","import React, { Component } from 'react';\nimport User from './User'\n\nclass Installments extends Component {\n    constructor() {\n        super();\n        this.state = {\n            filter: false\n        };\n    }\n\n    payment(idx) {\n        const installments = this.props.data.installments\n        const data = this.props.data.listOfData\n        const listOfData = data.amountTaken -= installments[idx].value\n        data.amountPayd += installments[idx].value\n\n        installments[idx].payd = true\n        this.setState({\n            installments: installments,\n            listOfData: listOfData,\n\n        })\n    }\n\n    handleChange(event) {\n        if (event.target.type === 'checkbox') {\n            this.setState({ [event.target.name]: event.target.checked })\n        }\n    }\n\n    render() {\n        const data = this.props.data.installments\n        return (\n            <div className=\"container mb-4\">\n                <User data={this.props} />\n                <h1 className=\"mt-4\">Boletos</h1>\n                <div className=\"form-check\">\n                    <input type=\"checkbox\" name=\"filter\" className=\"form-check-input\" id=\"exampleCheck1\" onChange={(e) => this.handleChange(e)} />\n                    <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">Mostrar apenas boletos a pagar</label>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col d-flex flex-wrap justify-content-between\">\n                        {this.state.filter ? data.filter(el => el.payd === false).map((el, idx) =>\n                            <div key={idx}>\n                                <div className=\"card mt-4 hvr-grow-shadow\" style={{ minWidth: \"300px\" }}>\n                                    <div className=\"card-header\">\n                                        <strong>Vencimento: </strong>{el.dueDate}\n                                    </div>\n                                    <div className=\"card-body\">\n                                        <h5 className=\"card-title\"><strong>Valor: </strong>{el.formatedValue}</h5>\n                                        {el.payd === false ? <p className=\"card-text\" style={{ color: \"red\" }}>Parcela a pagar</p> : <p style={{ color: \"green\" }}>Parcela paga</p>}\n                                        <button className=\"btn btn-primary btn-pay\" onClick={() => this.payment(idx)}>Pagar</button>\n                                    </div>\n                                </div>\n                            </div>\n                        )\n                            :\n                            data.map((el, idx) =>\n                                <div key={idx}>\n                                    <div className=\"card mt-4 hvr-grow-shadow\" style={{ minWidth: \"300px\" }}>\n                                        <div className=\"card-header\">\n                                            <strong>Vencimento: </strong>{el.dueDate}\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <h5 className=\"card-title\"><strong>Valor: </strong>{el.formatedValue}</h5>\n                                            {el.payd === false ? <p className=\"card-text\" style={{ color: \"red\" }}>Parcela a pagar</p> : <p style={{ color: \"green\" }}>Parcela paga</p>}\n                                            {el.payd === true ? <button className=\"btn btn-primary btn-pay\" disabled>Pago</button> : <button className=\"btn btn-primary btn-pay\" onClick={() => this.payment(idx)}>Pagar</button>}\n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        }\n                    </div>\n\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default Installments","import React, { Component } from 'react'\nimport axios from 'axios'\nimport Installments from './Installments'\n\nimport { NavLink } from 'react-router-dom'\n\nclass Home extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            listOfData: [],\n            installments: [],\n        }\n    }\n\n    getAllData = () => {\n        axios.get(`http://www.mocky.io/v2/5c923b0932000029056bce39`)\n            .then(responseFromApi => {\n                this.setState({\n                    installments: responseFromApi.data.installments,\n                    listOfData: responseFromApi.data\n                })\n            })\n            .catch(err => console.log(err))\n    }\n\n\n    componentDidMount() {\n        this.getAllData();\n    }\n\n    render() {\n        return (\n            <div id=\"content-wrap\">\n                <Installments data={this.state} />\n            </div>\n        )\n    }\n}\n\nexport default Home","import React, { Component } from 'react'\nimport { NavLink } from 'react-router-dom'\n\nclass Navbar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            listOfData: this.props.listOfData\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <nav className=\"navbar navbar-light bg-light d-flex justify-content-center bg-navbar fixed-top\">\n                    <NavLink to=\"/\"><img style={{ width: \"80px\" }} src=\"./img/provi.png\"></img></NavLink>\n                    <form className=\"form-inline\">\n                    </form>\n                </nav>\n            </div>\n        )\n    }\n\n}\n\nexport default Navbar\n\n","import React, { Component } from 'react'\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div id=\"footer\" className=\"d-flex justify-content-center align-items-center\">\n\n                <p>Av. Dr. Cardoso de Melo, 1340 - 1º Andar - Conjunto 11 - Vila Olímpia, São Paulo - SP, 04548-004</p>\n\n            </div>\n        )\n    }\n}\n\nexport default Footer","import React, { Component } from 'react';\nimport User from './components/User'\nimport Home from './components/Home'\nimport Navbar from './components/Navbar'\nimport Footer from './components/Footer'\nimport { Switch, Route } from 'react-router-dom'\nimport './App.css';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"App\" id=\"page-container\">\n        <Navbar/>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/user\" component={User} />\n        </Switch>\n        <Footer/>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n    <Router>\n        <App />\n    </Router>\n), document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}